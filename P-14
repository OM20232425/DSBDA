*14*
Create a Linear Regression Model using Python to predict home prices using Boston Housing Dataset. The objective is to predict the value of prices of the 
house using the given features.
***********************************************************************************************************

import pandas as pd
import matplotlib.pyplot as plt
from fairlearn.datasets import fetch_boston # to install -> pip install fairlearn
from sklearn.model_selection import train_test_split
import sklearn
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

boston = fetch_boston()
data = pd.DataFrame(boston.data)

data.columns = boston.feature_names

data.head()

data['PRICE'] = boston.target

data.isnull().sum()


x = data.drop(['PRICE'], axis = 1)
y = data['PRICE']

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.2,random_state = 0)

lm = LinearRegression()

model=lm.fit(xtrain, ytrain)

ytrain_pred = lm.predict(xtrain)
ytest_pred = lm.predict(xtest)

df_train=pd.DataFrame(ytrain_pred,ytrain)

print(df_train)

df_test=pd.DataFrame(ytest_pred,ytest)

print(df_test)

trmse = mean_squared_error(ytest, ytest_pred)
print(trmse)
temse = mean_squared_error(ytrain_pred,ytrain)
print(temse)
plt.scatter(ytrain ,ytrain_pred,c='blue',marker='o',label='Training data')
plt.scatter(ytest,ytest_pred ,c='lightgreen',marker='s',label='Test data')
plt.xlabel('True values')
plt.ylabel('Predicted')
plt.title("True value vs Predicted value")
plt.legend(loc= 'upper left')
plt.plot()
plt.show()


